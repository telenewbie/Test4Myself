// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: testPb.proto

package muduo;

public final class TestPb {
  private TestPb() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public enum TEST_ENUM
      implements com.google.protobuf.ProtocolMessageEnum {
    TEST_ENUM_1(0, 0),
    TEST_ENUM_2(1, 1),
    TEST_ENUM_3(2, 2),
    TEST_ENUM_4(3, 3),
    TEST_ENUM_5(4, 4),
    TEST_ENUM_6(5, 5),
    ;
    
    
    public final int getNumber() { return value; }
    
    public static TEST_ENUM valueOf(int value) {
      switch (value) {
        case 0: return TEST_ENUM_1;
        case 1: return TEST_ENUM_2;
        case 2: return TEST_ENUM_3;
        case 3: return TEST_ENUM_4;
        case 4: return TEST_ENUM_5;
        case 5: return TEST_ENUM_6;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<TEST_ENUM>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<TEST_ENUM>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TEST_ENUM>() {
            public TEST_ENUM findValueByNumber(int number) {
              return TEST_ENUM.valueOf(number)
    ;        }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return TestPb.getDescriptor().getEnumTypes().get(0);
    }
    
    private static final TEST_ENUM[] VALUES = {
      TEST_ENUM_1, TEST_ENUM_2, TEST_ENUM_3, TEST_ENUM_4, TEST_ENUM_5, TEST_ENUM_6, 
    };
    public static TEST_ENUM valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    private final int index;
    private final int value;
    private TEST_ENUM(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    static {
      TestPb.getDescriptor();
    }
    
    // @@protoc_insertion_point(enum_scope:muduo.TEST_ENUM)
  }
  
  public static final class Query extends
      com.google.protobuf.GeneratedMessage {
    // Use Query.newBuilder() to construct.
    private Query() {
      initFields();
    }
    private Query(boolean noInit) {}
    
    private static final Query defaultInstance;
    public static Query getDefaultInstance() {
      return defaultInstance;
    }
    
    public Query getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return TestPb.internal_static_muduo_Query_descriptor;
    }
    
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return TestPb.internal_static_muduo_Query_fieldAccessorTable;
    }
    
    // optional int32 INT32 = 1 [default = 5];
    public static final int INT32_FIELD_NUMBER = 1;
    private boolean hasINT32;
    private int iNT32_ = 5;
    public boolean hasINT32() { return hasINT32; }
    public int getINT32() { return iNT32_; }
    
    // optional uint32 UINT32 = 2;
    public static final int UINT32_FIELD_NUMBER = 2;
    private boolean hasUINT32;
    private int uINT32_ = 0;
    public boolean hasUINT32() { return hasUINT32; }
    public int getUINT32() { return uINT32_; }
    
    // optional int64 INT64 = 3;
    public static final int INT64_FIELD_NUMBER = 3;
    private boolean hasINT64;
    private long iNT64_ = 0L;
    public boolean hasINT64() { return hasINT64; }
    public long getINT64() { return iNT64_; }
    
    // optional uint64 UINT64 = 4;
    public static final int UINT64_FIELD_NUMBER = 4;
    private boolean hasUINT64;
    private long uINT64_ = 0L;
    public boolean hasUINT64() { return hasUINT64; }
    public long getUINT64() { return uINT64_; }
    
    // optional bool BOOL = 5;
    public static final int BOOL_FIELD_NUMBER = 5;
    private boolean hasBOOL;
    private boolean bOOL_ = false;
    public boolean hasBOOL() { return hasBOOL; }
    public boolean getBOOL() { return bOOL_; }
    
    // optional .muduo.TEST_ENUM ENUM = 6;
    public static final int ENUM_FIELD_NUMBER = 6;
    private boolean hasENUM;
    private TEST_ENUM eNUM_;
    public boolean hasENUM() { return hasENUM; }
    public TEST_ENUM getENUM() { return eNUM_; }
    
    // optional string STRING = 7 [default = "12345"];
    public static final int STRING_FIELD_NUMBER = 7;
    private boolean hasSTRING;
    private String sTRING_ = "12345";
    public boolean hasSTRING() { return hasSTRING; }
    public String getSTRING() { return sTRING_; }
    
    // optional .muduo.Anser ANSER = 8;
    public static final int ANSER_FIELD_NUMBER = 8;
    private boolean hasANSER;
    private Anser aNSER_;
    public boolean hasANSER() { return hasANSER; }
    public Anser getANSER() { return aNSER_; }
    
    // repeated .muduo.Anser rptAnser = 9;
    public static final int RPTANSER_FIELD_NUMBER = 9;
    private java.util.List<Anser> rptAnser_ =
      java.util.Collections.emptyList();
    public java.util.List<Anser> getRptAnserList() {
      return rptAnser_;
    }
    public int getRptAnserCount() { return rptAnser_.size(); }
    public Anser getRptAnser(int index) {
      return rptAnser_.get(index);
    }
    
    // optional .muduo.Test test = 11;
    public static final int TEST_FIELD_NUMBER = 11;
    private boolean hasTest;
    private Test test_;
    public boolean hasTest() { return hasTest; }
    public Test getTest() { return test_; }
    
    private void initFields() {
      eNUM_ = TEST_ENUM.TEST_ENUM_1;
      aNSER_ = Anser.getDefaultInstance();
      test_ = Test.getDefaultInstance();
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasINT32()) {
        output.writeInt32(1, getINT32());
      }
      if (hasUINT32()) {
        output.writeUInt32(2, getUINT32());
      }
      if (hasINT64()) {
        output.writeInt64(3, getINT64());
      }
      if (hasUINT64()) {
        output.writeUInt64(4, getUINT64());
      }
      if (hasBOOL()) {
        output.writeBool(5, getBOOL());
      }
      if (hasENUM()) {
        output.writeEnum(6, getENUM().getNumber());
      }
      if (hasSTRING()) {
        output.writeString(7, getSTRING());
      }
      if (hasANSER()) {
        output.writeMessage(8, getANSER());
      }
      for (Anser element : getRptAnserList()) {
        output.writeMessage(9, element);
      }
      if (hasTest()) {
        output.writeMessage(11, getTest());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasINT32()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getINT32());
      }
      if (hasUINT32()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, getUINT32());
      }
      if (hasINT64()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, getINT64());
      }
      if (hasUINT64()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, getUINT64());
      }
      if (hasBOOL()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, getBOOL());
      }
      if (hasENUM()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, getENUM().getNumber());
      }
      if (hasSTRING()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(7, getSTRING());
      }
      if (hasANSER()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getANSER());
      }
      for (Anser element : getRptAnserList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, element);
      }
      if (hasTest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, getTest());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static Query parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static Query parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static Query parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static Query parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static Query parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static Query parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static Query parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static Query parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static Query parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static Query parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(Query prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private Query result;
      
      // Construct using muduo.TestPb.Query.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new Query();
        return builder;
      }
      
      protected Query internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new Query();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Query.getDescriptor();
      }
      
      public Query getDefaultInstanceForType() {
        return Query.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public Query build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private Query buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public Query buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.rptAnser_ != java.util.Collections.EMPTY_LIST) {
          result.rptAnser_ =
            java.util.Collections.unmodifiableList(result.rptAnser_);
        }
        Query returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Query) {
          return mergeFrom((Query)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(Query other) {
        if (other == Query.getDefaultInstance()) return this;
        if (other.hasINT32()) {
          setINT32(other.getINT32());
        }
        if (other.hasUINT32()) {
          setUINT32(other.getUINT32());
        }
        if (other.hasINT64()) {
          setINT64(other.getINT64());
        }
        if (other.hasUINT64()) {
          setUINT64(other.getUINT64());
        }
        if (other.hasBOOL()) {
          setBOOL(other.getBOOL());
        }
        if (other.hasENUM()) {
          setENUM(other.getENUM());
        }
        if (other.hasSTRING()) {
          setSTRING(other.getSTRING());
        }
        if (other.hasANSER()) {
          mergeANSER(other.getANSER());
        }
        if (!other.rptAnser_.isEmpty()) {
          if (result.rptAnser_.isEmpty()) {
            result.rptAnser_ = new java.util.ArrayList<Anser>();
          }
          result.rptAnser_.addAll(other.rptAnser_);
        }
        if (other.hasTest()) {
          mergeTest(other.getTest());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setINT32(input.readInt32());
              break;
            }
            case 16: {
              setUINT32(input.readUInt32());
              break;
            }
            case 24: {
              setINT64(input.readInt64());
              break;
            }
            case 32: {
              setUINT64(input.readUInt64());
              break;
            }
            case 40: {
              setBOOL(input.readBool());
              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              TEST_ENUM value = TEST_ENUM.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(6, rawValue);
              } else {
                setENUM(value);
              }
              break;
            }
            case 58: {
              setSTRING(input.readString());
              break;
            }
            case 66: {
              Anser.Builder subBuilder = Anser.newBuilder();
              if (hasANSER()) {
                subBuilder.mergeFrom(getANSER());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setANSER(subBuilder.buildPartial());
              break;
            }
            case 74: {
              Anser.Builder subBuilder = Anser.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addRptAnser(subBuilder.buildPartial());
              break;
            }
            case 90: {
              Test.Builder subBuilder = Test.newBuilder();
              if (hasTest()) {
                subBuilder.mergeFrom(getTest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setTest(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional int32 INT32 = 1 [default = 5];
      public boolean hasINT32() {
        return result.hasINT32();
      }
      public int getINT32() {
        return result.getINT32();
      }
      public Builder setINT32(int value) {
        result.hasINT32 = true;
        result.iNT32_ = value;
        return this;
      }
      public Builder clearINT32() {
        result.hasINT32 = false;
        result.iNT32_ = 5;
        return this;
      }
      
      // optional uint32 UINT32 = 2;
      public boolean hasUINT32() {
        return result.hasUINT32();
      }
      public int getUINT32() {
        return result.getUINT32();
      }
      public Builder setUINT32(int value) {
        result.hasUINT32 = true;
        result.uINT32_ = value;
        return this;
      }
      public Builder clearUINT32() {
        result.hasUINT32 = false;
        result.uINT32_ = 0;
        return this;
      }
      
      // optional int64 INT64 = 3;
      public boolean hasINT64() {
        return result.hasINT64();
      }
      public long getINT64() {
        return result.getINT64();
      }
      public Builder setINT64(long value) {
        result.hasINT64 = true;
        result.iNT64_ = value;
        return this;
      }
      public Builder clearINT64() {
        result.hasINT64 = false;
        result.iNT64_ = 0L;
        return this;
      }
      
      // optional uint64 UINT64 = 4;
      public boolean hasUINT64() {
        return result.hasUINT64();
      }
      public long getUINT64() {
        return result.getUINT64();
      }
      public Builder setUINT64(long value) {
        result.hasUINT64 = true;
        result.uINT64_ = value;
        return this;
      }
      public Builder clearUINT64() {
        result.hasUINT64 = false;
        result.uINT64_ = 0L;
        return this;
      }
      
      // optional bool BOOL = 5;
      public boolean hasBOOL() {
        return result.hasBOOL();
      }
      public boolean getBOOL() {
        return result.getBOOL();
      }
      public Builder setBOOL(boolean value) {
        result.hasBOOL = true;
        result.bOOL_ = value;
        return this;
      }
      public Builder clearBOOL() {
        result.hasBOOL = false;
        result.bOOL_ = false;
        return this;
      }
      
      // optional .muduo.TEST_ENUM ENUM = 6;
      public boolean hasENUM() {
        return result.hasENUM();
      }
      public TEST_ENUM getENUM() {
        return result.getENUM();
      }
      public Builder setENUM(TEST_ENUM value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasENUM = true;
        result.eNUM_ = value;
        return this;
      }
      public Builder clearENUM() {
        result.hasENUM = false;
        result.eNUM_ = TEST_ENUM.TEST_ENUM_1;
        return this;
      }
      
      // optional string STRING = 7 [default = "12345"];
      public boolean hasSTRING() {
        return result.hasSTRING();
      }
      public String getSTRING() {
        return result.getSTRING();
      }
      public Builder setSTRING(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasSTRING = true;
        result.sTRING_ = value;
        return this;
      }
      public Builder clearSTRING() {
        result.hasSTRING = false;
        result.sTRING_ = getDefaultInstance().getSTRING();
        return this;
      }
      
      // optional .muduo.Anser ANSER = 8;
      public boolean hasANSER() {
        return result.hasANSER();
      }
      public Anser getANSER() {
        return result.getANSER();
      }
      public Builder setANSER(Anser value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasANSER = true;
        result.aNSER_ = value;
        return this;
      }
      public Builder setANSER(Anser.Builder builderForValue) {
        result.hasANSER = true;
        result.aNSER_ = builderForValue.build();
        return this;
      }
      public Builder mergeANSER(Anser value) {
        if (result.hasANSER() &&
            result.aNSER_ != Anser.getDefaultInstance()) {
          result.aNSER_ =
            Anser.newBuilder(result.aNSER_).mergeFrom(value).buildPartial();
        } else {
          result.aNSER_ = value;
        }
        result.hasANSER = true;
        return this;
      }
      public Builder clearANSER() {
        result.hasANSER = false;
        result.aNSER_ = Anser.getDefaultInstance();
        return this;
      }
      
      // repeated .muduo.Anser rptAnser = 9;
      public java.util.List<Anser> getRptAnserList() {
        return java.util.Collections.unmodifiableList(result.rptAnser_);
      }
      public int getRptAnserCount() {
        return result.getRptAnserCount();
      }
      public Anser getRptAnser(int index) {
        return result.getRptAnser(index);
      }
      public Builder setRptAnser(int index, Anser value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.rptAnser_.set(index, value);
        return this;
      }
      public Builder setRptAnser(int index, Anser.Builder builderForValue) {
        result.rptAnser_.set(index, builderForValue.build());
        return this;
      }
      public Builder addRptAnser(Anser value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.rptAnser_.isEmpty()) {
          result.rptAnser_ = new java.util.ArrayList<Anser>();
        }
        result.rptAnser_.add(value);
        return this;
      }
      public Builder addRptAnser(Anser.Builder builderForValue) {
        if (result.rptAnser_.isEmpty()) {
          result.rptAnser_ = new java.util.ArrayList<Anser>();
        }
        result.rptAnser_.add(builderForValue.build());
        return this;
      }
      public Builder addAllRptAnser(
          Iterable<? extends Anser> values) {
        if (result.rptAnser_.isEmpty()) {
          result.rptAnser_ = new java.util.ArrayList<Anser>();
        }
        super.addAll(values, result.rptAnser_);
        return this;
      }
      public Builder clearRptAnser() {
        result.rptAnser_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional .muduo.Test test = 11;
      public boolean hasTest() {
        return result.hasTest();
      }
      public Test getTest() {
        return result.getTest();
      }
      public Builder setTest(Test value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasTest = true;
        result.test_ = value;
        return this;
      }
      public Builder setTest(Test.Builder builderForValue) {
        result.hasTest = true;
        result.test_ = builderForValue.build();
        return this;
      }
      public Builder mergeTest(Test value) {
        if (result.hasTest() &&
            result.test_ != Test.getDefaultInstance()) {
          result.test_ =
            Test.newBuilder(result.test_).mergeFrom(value).buildPartial();
        } else {
          result.test_ = value;
        }
        result.hasTest = true;
        return this;
      }
      public Builder clearTest() {
        result.hasTest = false;
        result.test_ = Test.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:muduo.Query)
    }
    
    static {
      defaultInstance = new Query(true);
      TestPb.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:muduo.Query)
  }
  
  public static final class Test2 extends
      com.google.protobuf.GeneratedMessage {
    // Use Test2.newBuilder() to construct.
    private Test2() {
      initFields();
    }
    private Test2(boolean noInit) {}
    
    private static final Test2 defaultInstance;
    public static Test2 getDefaultInstance() {
      return defaultInstance;
    }
    
    public Test2 getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return TestPb.internal_static_muduo_Test2_descriptor;
    }
    
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return TestPb.internal_static_muduo_Test2_fieldAccessorTable;
    }
    
    // optional int32 INT32 = 1;
    public static final int INT32_FIELD_NUMBER = 1;
    private boolean hasINT32;
    private int iNT32_ = 0;
    public boolean hasINT32() { return hasINT32; }
    public int getINT32() { return iNT32_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasINT32()) {
        output.writeInt32(1, getINT32());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasINT32()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getINT32());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static Test2 parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static Test2 parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static Test2 parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static Test2 parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static Test2 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static Test2 parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static Test2 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static Test2 parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static Test2 parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static Test2 parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(Test2 prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private Test2 result;
      
      // Construct using muduo.TestPb.Test2.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new Test2();
        return builder;
      }
      
      protected Test2 internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new Test2();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Test2.getDescriptor();
      }
      
      public Test2 getDefaultInstanceForType() {
        return Test2.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public Test2 build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private Test2 buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public Test2 buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        Test2 returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Test2) {
          return mergeFrom((Test2)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(Test2 other) {
        if (other == Test2.getDefaultInstance()) return this;
        if (other.hasINT32()) {
          setINT32(other.getINT32());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setINT32(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 INT32 = 1;
      public boolean hasINT32() {
        return result.hasINT32();
      }
      public int getINT32() {
        return result.getINT32();
      }
      public Builder setINT32(int value) {
        result.hasINT32 = true;
        result.iNT32_ = value;
        return this;
      }
      public Builder clearINT32() {
        result.hasINT32 = false;
        result.iNT32_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:muduo.Test2)
    }
    
    static {
      defaultInstance = new Test2(true);
      TestPb.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:muduo.Test2)
  }
  
  public static final class Test extends
      com.google.protobuf.GeneratedMessage {
    // Use Test.newBuilder() to construct.
    private Test() {
      initFields();
    }
    private Test(boolean noInit) {}
    
    private static final Test defaultInstance;
    public static Test getDefaultInstance() {
      return defaultInstance;
    }
    
    public Test getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return TestPb.internal_static_muduo_Test_descriptor;
    }
    
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return TestPb.internal_static_muduo_Test_fieldAccessorTable;
    }
    
    // optional int32 INT32 = 1;
    public static final int INT32_FIELD_NUMBER = 1;
    private boolean hasINT32;
    private int iNT32_ = 0;
    public boolean hasINT32() { return hasINT32; }
    public int getINT32() { return iNT32_; }
    
    // optional .muduo.Test2 test2 = 2;
    public static final int TEST2_FIELD_NUMBER = 2;
    private boolean hasTest2;
    private Test2 test2_;
    public boolean hasTest2() { return hasTest2; }
    public Test2 getTest2() { return test2_; }
    
    private void initFields() {
      test2_ = Test2.getDefaultInstance();
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasINT32()) {
        output.writeInt32(1, getINT32());
      }
      if (hasTest2()) {
        output.writeMessage(2, getTest2());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasINT32()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getINT32());
      }
      if (hasTest2()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getTest2());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static Test parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static Test parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static Test parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static Test parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static Test parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static Test parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static Test parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static Test parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static Test parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static Test parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(Test prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private Test result;
      
      // Construct using muduo.TestPb.Test.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new Test();
        return builder;
      }
      
      protected Test internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new Test();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Test.getDescriptor();
      }
      
      public Test getDefaultInstanceForType() {
        return Test.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public Test build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private Test buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public Test buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        Test returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Test) {
          return mergeFrom((Test)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(Test other) {
        if (other == Test.getDefaultInstance()) return this;
        if (other.hasINT32()) {
          setINT32(other.getINT32());
        }
        if (other.hasTest2()) {
          mergeTest2(other.getTest2());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setINT32(input.readInt32());
              break;
            }
            case 18: {
              Test2.Builder subBuilder = Test2.newBuilder();
              if (hasTest2()) {
                subBuilder.mergeFrom(getTest2());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setTest2(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional int32 INT32 = 1;
      public boolean hasINT32() {
        return result.hasINT32();
      }
      public int getINT32() {
        return result.getINT32();
      }
      public Builder setINT32(int value) {
        result.hasINT32 = true;
        result.iNT32_ = value;
        return this;
      }
      public Builder clearINT32() {
        result.hasINT32 = false;
        result.iNT32_ = 0;
        return this;
      }
      
      // optional .muduo.Test2 test2 = 2;
      public boolean hasTest2() {
        return result.hasTest2();
      }
      public Test2 getTest2() {
        return result.getTest2();
      }
      public Builder setTest2(Test2 value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasTest2 = true;
        result.test2_ = value;
        return this;
      }
      public Builder setTest2(Test2.Builder builderForValue) {
        result.hasTest2 = true;
        result.test2_ = builderForValue.build();
        return this;
      }
      public Builder mergeTest2(Test2 value) {
        if (result.hasTest2() &&
            result.test2_ != Test2.getDefaultInstance()) {
          result.test2_ =
            Test2.newBuilder(result.test2_).mergeFrom(value).buildPartial();
        } else {
          result.test2_ = value;
        }
        result.hasTest2 = true;
        return this;
      }
      public Builder clearTest2() {
        result.hasTest2 = false;
        result.test2_ = Test2.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:muduo.Test)
    }
    
    static {
      defaultInstance = new Test(true);
      TestPb.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:muduo.Test)
  }
  
  public static final class Anser extends
      com.google.protobuf.GeneratedMessage {
    // Use Anser.newBuilder() to construct.
    private Anser() {
      initFields();
    }
    private Anser(boolean noInit) {}
    
    private static final Anser defaultInstance;
    public static Anser getDefaultInstance() {
      return defaultInstance;
    }
    
    public Anser getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return TestPb.internal_static_muduo_Anser_descriptor;
    }
    
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return TestPb.internal_static_muduo_Anser_fieldAccessorTable;
    }
    
    // optional int32 INT32 = 1;
    public static final int INT32_FIELD_NUMBER = 1;
    private boolean hasINT32;
    private int iNT32_ = 0;
    public boolean hasINT32() { return hasINT32; }
    public int getINT32() { return iNT32_; }
    
    // optional string STRING = 2;
    public static final int STRING_FIELD_NUMBER = 2;
    private boolean hasSTRING;
    private String sTRING_ = "";
    public boolean hasSTRING() { return hasSTRING; }
    public String getSTRING() { return sTRING_; }
    
    // optional .muduo.TEST_ENUM ENUM = 3;
    public static final int ENUM_FIELD_NUMBER = 3;
    private boolean hasENUM;
    private TEST_ENUM eNUM_;
    public boolean hasENUM() { return hasENUM; }
    public TEST_ENUM getENUM() { return eNUM_; }
    
    // optional .muduo.Test test = 4;
    public static final int TEST_FIELD_NUMBER = 4;
    private boolean hasTest;
    private Test test_;
    public boolean hasTest() { return hasTest; }
    public Test getTest() { return test_; }
    
    private void initFields() {
      eNUM_ = TEST_ENUM.TEST_ENUM_1;
      test_ = Test.getDefaultInstance();
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasINT32()) {
        output.writeInt32(1, getINT32());
      }
      if (hasSTRING()) {
        output.writeString(2, getSTRING());
      }
      if (hasENUM()) {
        output.writeEnum(3, getENUM().getNumber());
      }
      if (hasTest()) {
        output.writeMessage(4, getTest());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasINT32()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getINT32());
      }
      if (hasSTRING()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getSTRING());
      }
      if (hasENUM()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, getENUM().getNumber());
      }
      if (hasTest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getTest());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static Anser parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static Anser parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static Anser parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static Anser parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static Anser parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static Anser parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static Anser parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static Anser parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static Anser parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static Anser parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(Anser prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private Anser result;
      
      // Construct using muduo.TestPb.Anser.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new Anser();
        return builder;
      }
      
      protected Anser internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new Anser();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Anser.getDescriptor();
      }
      
      public Anser getDefaultInstanceForType() {
        return Anser.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public Anser build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private Anser buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public Anser buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        Anser returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Anser) {
          return mergeFrom((Anser)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(Anser other) {
        if (other == Anser.getDefaultInstance()) return this;
        if (other.hasINT32()) {
          setINT32(other.getINT32());
        }
        if (other.hasSTRING()) {
          setSTRING(other.getSTRING());
        }
        if (other.hasENUM()) {
          setENUM(other.getENUM());
        }
        if (other.hasTest()) {
          mergeTest(other.getTest());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setINT32(input.readInt32());
              break;
            }
            case 18: {
              setSTRING(input.readString());
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              TEST_ENUM value = TEST_ENUM.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                setENUM(value);
              }
              break;
            }
            case 34: {
              Test.Builder subBuilder = Test.newBuilder();
              if (hasTest()) {
                subBuilder.mergeFrom(getTest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setTest(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional int32 INT32 = 1;
      public boolean hasINT32() {
        return result.hasINT32();
      }
      public int getINT32() {
        return result.getINT32();
      }
      public Builder setINT32(int value) {
        result.hasINT32 = true;
        result.iNT32_ = value;
        return this;
      }
      public Builder clearINT32() {
        result.hasINT32 = false;
        result.iNT32_ = 0;
        return this;
      }
      
      // optional string STRING = 2;
      public boolean hasSTRING() {
        return result.hasSTRING();
      }
      public String getSTRING() {
        return result.getSTRING();
      }
      public Builder setSTRING(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasSTRING = true;
        result.sTRING_ = value;
        return this;
      }
      public Builder clearSTRING() {
        result.hasSTRING = false;
        result.sTRING_ = getDefaultInstance().getSTRING();
        return this;
      }
      
      // optional .muduo.TEST_ENUM ENUM = 3;
      public boolean hasENUM() {
        return result.hasENUM();
      }
      public TEST_ENUM getENUM() {
        return result.getENUM();
      }
      public Builder setENUM(TEST_ENUM value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasENUM = true;
        result.eNUM_ = value;
        return this;
      }
      public Builder clearENUM() {
        result.hasENUM = false;
        result.eNUM_ = TEST_ENUM.TEST_ENUM_1;
        return this;
      }
      
      // optional .muduo.Test test = 4;
      public boolean hasTest() {
        return result.hasTest();
      }
      public Test getTest() {
        return result.getTest();
      }
      public Builder setTest(Test value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasTest = true;
        result.test_ = value;
        return this;
      }
      public Builder setTest(Test.Builder builderForValue) {
        result.hasTest = true;
        result.test_ = builderForValue.build();
        return this;
      }
      public Builder mergeTest(Test value) {
        if (result.hasTest() &&
            result.test_ != Test.getDefaultInstance()) {
          result.test_ =
            Test.newBuilder(result.test_).mergeFrom(value).buildPartial();
        } else {
          result.test_ = value;
        }
        result.hasTest = true;
        return this;
      }
      public Builder clearTest() {
        result.hasTest = false;
        result.test_ = Test.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:muduo.Anser)
    }
    
    static {
      defaultInstance = new Anser(true);
      TestPb.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:muduo.Anser)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_muduo_Query_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_muduo_Query_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_muduo_Test2_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_muduo_Test2_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_muduo_Test_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_muduo_Test_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_muduo_Anser_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_muduo_Anser_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\014testPb.proto\022\005muduo\"\345\001\n\005Query\022\020\n\005INT32" +
      "\030\001 \001(\005:\0015\022\016\n\006UINT32\030\002 \001(\r\022\r\n\005INT64\030\003 \001(\003" +
      "\022\016\n\006UINT64\030\004 \001(\004\022\014\n\004BOOL\030\005 \001(\010\022\036\n\004ENUM\030\006" +
      " \001(\0162\020.muduo.TEST_ENUM\022\025\n\006STRING\030\007 \001(\t:\005" +
      "12345\022\033\n\005ANSER\030\010 \001(\0132\014.muduo.Anser\022\036\n\010rp" +
      "tAnser\030\t \003(\0132\014.muduo.Anser\022\031\n\004test\030\013 \001(\013" +
      "2\013.muduo.Test\"\026\n\005Test2\022\r\n\005INT32\030\001 \001(\005\"2\n" +
      "\004Test\022\r\n\005INT32\030\001 \001(\005\022\033\n\005test2\030\002 \001(\0132\014.mu" +
      "duo.Test2\"a\n\005Anser\022\r\n\005INT32\030\001 \001(\005\022\016\n\006STR" +
      "ING\030\002 \001(\t\022\036\n\004ENUM\030\003 \001(\0162\020.muduo.TEST_ENU",
      "M\022\031\n\004test\030\004 \001(\0132\013.muduo.Test*q\n\tTEST_ENU" +
      "M\022\017\n\013TEST_ENUM_1\020\000\022\017\n\013TEST_ENUM_2\020\001\022\017\n\013T" +
      "EST_ENUM_3\020\002\022\017\n\013TEST_ENUM_4\020\003\022\017\n\013TEST_EN" +
      "UM_5\020\004\022\017\n\013TEST_ENUM_6\020\005"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_muduo_Query_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_muduo_Query_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_muduo_Query_descriptor,
              new String[] { "INT32", "UINT32", "INT64", "UINT64", "BOOL", "ENUM", "STRING", "ANSER", "RptAnser", "Test", },
              Query.class,
              Query.Builder.class);
          internal_static_muduo_Test2_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_muduo_Test2_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_muduo_Test2_descriptor,
              new String[] { "INT32", },
              Test2.class,
              Test2.Builder.class);
          internal_static_muduo_Test_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_muduo_Test_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_muduo_Test_descriptor,
              new String[] { "INT32", "Test2", },
              Test.class,
              Test.Builder.class);
          internal_static_muduo_Anser_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_muduo_Anser_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_muduo_Anser_descriptor,
              new String[] { "INT32", "STRING", "ENUM", "Test", },
              Anser.class,
              Anser.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
